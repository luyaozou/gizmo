#! encoding = utf-8

''' This script is used for performing basic fft transformation
and filtering for the PhLAM mm chirped pulse spectrum '''

import sys
import numpy as np
from PyQt5 import QtWidgets, QtGui, QtCore
import pyqtgraph as pg

HEADER = '# This spectrum is generated by fft.py (Luyao Zou).'
ABS_RANGE = 100 # maximum absorption freq range +/- full FFT freq range (MHz)

class MainWindow(QtWidgets.QMainWindow):
    '''
        Implements the main window
    '''
    def __init__(self, parent=None):
        QtWidgets.QMainWindow.__init__(self)
        self.setStyleSheet('font-size: 10pt; font-family: default')

        # Set global window properties
        self.setWindowTitle('Chirped Pulse FFT')
        self.setMinimumWidth(800)
        self.setMinimumHeight(600)
        self.resize(QtCore.QSize(1200, 800))

        # initiate component classes
        self._init_menubar()
        self._init_canvas()
        self._init_parbox()
        self.tdsData = TDSData()
        self.absData = ABSData()

        # Set window layout
        self.mainLayout = QtWidgets.QHBoxLayout()
        self.mainLayout.setSpacing(6)
        self.mainLayout.addWidget(self.canvasBox)
        self.mainLayout.addWidget(self.parBox)

        # Enable main window
        self.mainWidget = QtWidgets.QWidget()
        self.mainWidget.setLayout(self.mainLayout)
        self.setCentralWidget(self.mainWidget)

    def _init_menubar(self):
        ''' Initiate menu bar '''

        self.openFileAction = QtGui.QAction('Open File', self)
        self.openFileAction.setShortcut('Ctrl+O')
        self.openFileAction.triggered.connect(self._open_file)
        self.batchAction = QtGui.QAction('Batch Process', self)
        self.batchAction.setShortcut('Ctrl+Shift+B')
        self.batchAction.triggered.connect(self._batch)
        self.refFileAction = QtGui.QAction('Open Absorption Ref', self)
        self.refFileAction.setShortcut('Ctrl+Shift+R')
        self.refFileAction.triggered.connect(self._open_ref_file)
        self.statusBar()

        menuFile = self.menuBar().addMenu('&File')
        menuFile.addAction(self.openFileAction)
        menuFile.addAction(self.batchAction)
        menuFile.addAction(self.refFileAction)

    def _init_canvas(self):
        ''' initiate plot canvas '''

        # for time domain spectrum
        tdsCanvas = pg.PlotWidget(title='Time domain spectrum')
        tdsCanvas.setLabel('left', text='Voltage', units='V')
        tdsCanvas.setLabel('bottom', text='Time', units='s')
        tdsCanvas.showGrid(x=True, y=True, alpha=0.8)
        self.tdsCurve = tdsCanvas.plot()
        self.tdsCurve.setPen(color='w', width=1)

        # for freq domain spectrum
        fdsCanvas = pg.PlotWidget(title='Frequency domain spectrum')
        fdsCanvas.setLabel('left', text='Intensity', units='a.u.')
        fdsCanvas.setLabel('bottom', text='FFT Frequency', units='Hz')
        fdsCanvas.showGrid(x=True, y=True, alpha=0.8)
        fdsCanvas.invertX(True)
        self.fdsCurve = fdsCanvas.plot()
        self.fdsCurve.setPen(color='FFB62F', width=1.5)

        # for absorption ref spectrum
        absCanvas = pg.PlotWidget(title='Absorption spectrum reference')
        absCanvas.setLabel('left', text='Intensity', units='a.u.')
        absCanvas.setLabel('bottom', text='Line Frequency', units='Hz')
        absCanvas.showGrid(x=True, y=True, alpha=0.8)
        # fdsCanvas.setXLink(absCanvas)   # link two views
        self.absCurve = absCanvas.plot()
        self.absCurve.setPen(color='5dcfe2', width=1.5)

        self.canvasBox = QtWidgets.QWidget()
        canvasLayout = QtWidgets.QVBoxLayout()  # layout for canvas
        canvasLayout.addWidget(tdsCanvas)  # time domain spectrum canvas
        canvasLayout.addWidget(fdsCanvas)  # freq domain spectrum canvas
        canvasLayout.addWidget(absCanvas)  # absorption spectrum canvas
        self.canvasBox.setLayout(canvasLayout)

    def _init_parbox(self):
        ''' initiate parameter box widgets '''

        self.parBox = QtWidgets.QWidget()
        parLayout = QtWidgets.QGridLayout()    # layout for parameters
        self.infoBox = InfoBox(self)    # for scan info (from file header)
        self.fftBox = FFTBox(self)      # for fft window & other settings
        self.filterBox = FilterBox(self)    # for filter settings
        self.calcBtn = QtWidgets.QPushButton('Calc')
        self.calcBtn.clicked.connect(self.calc)
        self.saveBtn = QtWidgets.QPushButton('Save')
        self.saveBtn.clicked.connect(self._save)
        self.batchBtn = QtWidgets.QPushButton('Batch')
        self.batchBtn.clicked.connect(self._batch)
        # disable the button unless data file is loaded
        self.calcBtn.setDisabled(True)
        self.saveBtn.setDisabled(True)
        self.batchBtn.setDisabled(True)

        # add widgets & set up layout
        parLayout.addWidget(self.infoBox, 0, 0, 1, 2)
        parLayout.addWidget(self.fftBox, 1, 0, 1, 2)
        parLayout.addWidget(self.filterBox, 2, 0, 1, 2)
        parLayout.addWidget(self.calcBtn, 3, 0, 1, 1)
        parLayout.addWidget(self.saveBtn, 3, 1, 1, 1)
        parLayout.addWidget(self.batchBtn, 4, 0, 1, 2)
        self.parBox.setLayout(parLayout)

    def fdsPlot(self):
        ''' Plot frequency domain spectrum.
            Public available to receive signals from other widgets.
        '''

        # restrict the spectrum frequency to the expected chirp frequency
        if self.fftBox.limitFreqCheck.isChecked():
            self.fdsCurve.setData(self.fdsSpecLimit)
        else:   # full scale
            self.fdsCurve.setData(self.fdsSpecFull)

    def _open_file(self):
        ''' Open a single data file '''

        # open file dialog
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(self,
                'Open Data File', '/home/luyao/Documents/Data', 'Time domain spectrum (*.tdf)')
        # load data file
        status = self.tdsData.load_file(filename)
        if status:  # sucessfully load file
            # refresh info box
            self.infoBox.refresh()
            # plot data on tds canvas
            self.tdsCurve.setData(self.tdsData.tdsSpec)
            # enable buttons and panels
            self.fftBox.setDisabled(False)
            self.filterBox.setDisabled(False)
            self.calcBtn.setDisabled(False)
            self.saveBtn.setDisabled(False)
            # update lower & upper limits for the fft window
            self.fftBox.setInitInput()
            # initiate one fft plot
            self.calc()
        else:
            pass

    def _open_ref_file(self):
        ''' Open an absorption spectrum as a reference '''

        # disable this when no fds spectrum
        if self.tdsData.isData:
            # open file dialog
            filename, _ = QtWidgets.QFileDialog.getOpenFileName(self,
                'Open Data File', '/home/luyao/Documents/Data', 'Absorption Spectrum (*.txt, *.csv, *.dat)')
            # load data file (provide fft freq range)
            status = self.absData.load_file(filename,
                        self.tdsData.minFreq, self.tdsData.maxFreq)
            if status:
                self.absCurve.setData(self.absData.absSpec)
            else:
                pass
        else:
            d = QtWidgets.QMessageBox(QtGui.QMessageBox.Warning, 'No time domain data', 'Please load valid time domain data before loading reference spectrum.')
            d.exec_()

    def calc(self, wfname='None'):
        ''' Calculate fft with selected window function '''

        # Select fft data range
        i_min = self.fftBox.fftMin()
        i_max = self.fftBox.fftMax()
        # check the validity of i_min and i_max
        if i_min >= 0 and i_min < i_max:
            # restore normal text color
            self.fftBox.fftMinInput.setStyleSheet('color: black')
            self.fftBox.fftMaxInput.setStyleSheet('color: black')
            if i_max < self.tdsData.acqN:
                y = self.tdsData.tdsSpec[i_min:i_max+1, 1]
            else:
                y = self.tdsData.tdsSpec[i_min:, 1]
        else:   # invalid i_min & i_max will not take any affect
            # set warning text color
            self.fftBox.fftMinInput.setStyleSheet('color: #D63333')
            self.fftBox.fftMaxInput.setStyleSheet('color: #D63333')
            y = self.tdsData.tdsSpec[:, 1]

        # check zero-padding setting
        zp = self.fftBox.zeroPadding()
        if zp:
            yz = np.zeros(len(y) * zp)
            y = np.concatenate((y, yz))
        else:
            pass

        # apply window function
        wf = self.filterBox.get_wf(len(y))
        # fft
        fft_y = np.fft.rfft(y * wf)
        # calculate corresponding frequency
        f = np.fft.rfftfreq(len(y)) * self.tdsData.adcCLK

        # chop off the 0 frequency & concatenate spectrum
        self.fdsSpecFull = np.column_stack((f[1:], np.absolute(fft_y[1:])))

        # calculate chirp frequency range
        fmin = self.tdsData.imFreq * 1e6
        fmax = (self.tdsData.imFreq + self.tdsData.spanFreq) * 1e6
        idx = np.logical_and(f[1:] >= fmin, f[1:] <= fmax)
        self.fdsSpecLimit = self.fdsSpecFull[idx, :]

        # flip the array to get increasing frequency
        self.fdsSpecFull = np.flipud(self.fdsSpecFull)
        self.fdsSpecLimit = np.flipud(self.fdsSpecLimit)
        # plot spectrum
        self.fdsPlot()

    def _save(self):
        ''' save spectrum '''

        if self.fftBox.limitFreqCheck.isChecked():
            spec = self.fdsSpecLimit
        else:
            spec = self.fdsSpecFull

        # rescale the frequency to MHz unit & adjust to line frequency
        spec[:, 0] = self.tdsData.detFreq - spec[:, 0] * 1e-6

        filename, _ = QtWidgets.QFileDialog.getSaveFileName(self,
                'Save Spectrum', '/home/luyao/Documents/Data', 'Frequency domain spectrum (*.txt)')

        np.savetxt(filename, spec, delimiter='\t',
                   fmt='%.4f', header=HEADER)

    def _batch(self):
        ''' Batch Process '''

        print('batch')

    def on_exit(self):
        self.close()

    def closeEvent(self, event):
        q = QtWidgets.QMessageBox.question(self, 'Quit？',
                       'Are you sure to quit？', QtWidgets.QMessageBox.Yes |
                       QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.Yes)
        if q == QtWidgets.QMessageBox.Yes:
            self.close()
        else:
            event.ignore()


class InfoBox(QtGui.QGroupBox):
    '''
        Scan information box
    '''

    def __init__(self, parent):
        QtGui.QWidget.__init__(self, parent)
        self.parent = parent

        self.setTitle('Scan Information')
        self.setAlignment(QtCore.Qt.AlignLeft)

        self.minFreqLabel = QtWidgets.QLabel()
        self.maxFreqLabel = QtWidgets.QLabel()
        self.detFreqLabel = QtWidgets.QLabel()
        self.spanFreqLabel = QtWidgets.QLabel()
        self.imFreqLabel = QtWidgets.QLabel()
        self.adcCLKLabel = QtWidgets.QLabel()
        self.pulseLenLabel = QtWidgets.QLabel()
        self.acqNLabel = QtWidgets.QLabel()
        self.acqTLabel = QtWidgets.QLabel()
        self.repRateLabel = QtWidgets.QLabel()

        thisLayout = QtWidgets.QGridLayout()
        thisLayout.addWidget(QtWidgets.QLabel('Frequency MIN: '), 0, 0)
        thisLayout.addWidget(QtWidgets.QLabel('Frequency MAX: '), 1, 0)
        thisLayout.addWidget(QtWidgets.QLabel('Detection Freq: '), 2, 0)
        thisLayout.addWidget(QtWidgets.QLabel('Chirp Range: '), 3, 0)
        thisLayout.addWidget(QtWidgets.QLabel('Intermediate Freq: '), 4, 0)
        thisLayout.addWidget(QtWidgets.QLabel('ADC Clock: '), 5, 0)
        thisLayout.addWidget(QtWidgets.QLabel('Pulse Length: '), 6, 0)
        thisLayout.addWidget(QtWidgets.QLabel('Acq Number: '), 7, 0)
        thisLayout.addWidget(QtWidgets.QLabel('Acq Time: '), 8, 0)
        thisLayout.addWidget(QtWidgets.QLabel('Rep Rate: '), 9, 0)
        thisLayout.addWidget(self.minFreqLabel, 0, 1)
        thisLayout.addWidget(self.maxFreqLabel, 1, 1)
        thisLayout.addWidget(self.detFreqLabel, 2, 1)
        thisLayout.addWidget(self.spanFreqLabel, 3, 1)
        thisLayout.addWidget(self.imFreqLabel, 4, 1)
        thisLayout.addWidget(self.adcCLKLabel, 5, 1)
        thisLayout.addWidget(self.pulseLenLabel, 6, 1)
        thisLayout.addWidget(self.acqNLabel, 7, 1)
        thisLayout.addWidget(self.acqTLabel, 8, 1)
        thisLayout.addWidget(self.repRateLabel, 9, 1)
        self.setLayout(thisLayout)


    def refresh(self):
        ''' Update scan information.
            Line frequencies are in MHz & format directly.
            Other frequencies (clock, pulse, etc.) are in SI units and use pg.siFormat() to format.
        '''

        self.minFreqLabel.setText('{:.2f} MHz'.format(self.parent.tdsData.minFreq))
        self.maxFreqLabel.setText('{:.2f} MHz'.format(self.parent.tdsData.maxFreq))
        self.detFreqLabel.setText('{:.2f} MHz'.format(self.parent.tdsData.detFreq))
        self.spanFreqLabel.setText('{:.1f} MHz'.format(self.parent.tdsData.spanFreq))
        self.imFreqLabel.setText('{:.1f} MHz'.format(self.parent.tdsData.imFreq))
        self.adcCLKLabel.setText(pg.siFormat(self.parent.tdsData.adcCLK, precision=3, suffix='Hz'))
        self.pulseLenLabel.setText(pg.siFormat(self.parent.tdsData.pulseLen, precision=4, suffix='s'))
        self.acqNLabel.setText(str(self.parent.tdsData.acqN))
        self.acqTLabel.setText(pg.siFormat(self.parent.tdsData.acqT, precision=4, suffix='s'))
        self.repRateLabel.setText('{:g}'.format(self.parent.tdsData.repRate))


class FFTBox(QtGui.QGroupBox):
    '''
        FFT setting box
    '''

    def __init__(self, parent):
        QtGui.QWidget.__init__(self, parent)
        self.parent = parent

        self.setTitle('FFT Setting')
        self.setAlignment(QtCore.Qt.AlignLeft)
        self.setDisabled(True)  # disable the box unless tds is loaded

        self.fftMinInput = QtWidgets.QLineEdit()
        self.fftMaxInput = QtWidgets.QLineEdit()
        self.fftMinInput.textChanged.connect(self._refresh_min)
        self.fftMaxInput.textChanged.connect(self._refresh_max)
        self.fftMinTime = QtWidgets.QLabel()
        self.fftMaxTime = QtWidgets.QLabel()
        self.limitFreqCheck = QtWidgets.QCheckBox('Restrict spectrum to chirp frequency')
        self.limitFreqCheck.stateChanged.connect(self.parent.fdsPlot)
        self.zeroPaddingCheck = QtWidgets.QCheckBox('Zero Padding')
        self.zeroPaddingCheck.setChecked(True)
        self.zeroPaddingCheck.stateChanged.connect(self.parent.calc)
        self.zeroPaddingCheck.stateChanged.connect(self._set_zero_padding)
        self.zeroPaddingInput = QtWidgets.QLineEdit('1')
        self.zeroPaddingInput.setValidator(QtGui.QIntValidator(1, 9))
        self.zeroPaddingInput.editingFinished.connect(self.parent.calc)

        thisLayout = QtWidgets.QGridLayout()
        thisLayout.addWidget(QtWidgets.QLabel('FFT Range'), 0, 0)
        thisLayout.addWidget(QtWidgets.QLabel('Point'), 0, 1)
        thisLayout.addWidget(QtWidgets.QLabel('Time'), 0, 2)
        thisLayout.addWidget(QtWidgets.QLabel('Start'), 1, 0)
        thisLayout.addWidget(QtWidgets.QLabel('Stop'), 2, 0)
        thisLayout.addWidget(self.fftMinInput, 1, 1)
        thisLayout.addWidget(self.fftMaxInput, 2, 1)
        thisLayout.addWidget(self.fftMinTime, 1, 2)
        thisLayout.addWidget(self.fftMaxTime, 2, 2)
        thisLayout.addWidget(self.limitFreqCheck, 3, 0, 1, 2)
        thisLayout.addWidget(self.zeroPaddingCheck, 4, 0, 1, 1)
        thisLayout.addWidget(self.zeroPaddingInput, 4, 1, 1, 1)
        self.setLayout(thisLayout)

    def _refresh_min(self):
        ''' Refresh time convertion '''

        text_min = self.fftMin()
        t_min = text_min / self.parent.tdsData.adcCLK
        self.fftMinTime.setText(pg.siFormat(t_min, precision=4, suffix='s'))

    def _refresh_max(self):
        ''' Refresh time convertion '''

        text_max = self.fftMax()
        t_max = text_max / self.parent.tdsData.adcCLK
        self.fftMaxTime.setText(pg.siFormat(t_max, precision=4, suffix='s'))

    def _set_zero_padding(self):
        ''' Config zero padding setting '''

        if self.zeroPaddingCheck.isChecked():
            self.zeroPaddingInput.setReadOnly(False)
            self.zeroPaddingInput.setStyleSheet('background-color: None')
        else:
            self.zeroPaddingInput.setReadOnly(True)
            self.zeroPaddingInput.setStyleSheet('background-color: #E0E0E0')


    def setInitInput(self):
        ''' Set initial fft window input from tds data '''

        data_max = self.parent.tdsData.acqN
        t_max = self.parent.tdsData.acqT
        self.fftMinInput.setText('0')
        self.fftMaxInput.setText(str(data_max))
        self.fftMinTime.setText(pg.siFormat(0, precision=4, suffix='s'))
        self.fftMaxTime.setText(pg.siFormat(t_max, precision=4, suffix='s'))
        self.fftMinInput.setValidator(QtGui.QIntValidator(0, data_max))
        self.fftMaxInput.setValidator(QtGui.QIntValidator(0, data_max))

    def zeroPadding(self):
        ''' Return the zero-padding coefficient '''

        if self.zeroPaddingCheck.isChecked():
            return int(self.zeroPaddingInput.text())
        else:
            return 0

    def fftMin(self):
        ''' Return the fft min value (int) '''

        if self.fftMinInput.text():
            return int(self.fftMinInput.text())
        else:
            return 0

    def fftMax(self):
        ''' Return the fft max value (int) '''

        if self.fftMaxInput.text():
            return int(self.fftMaxInput.text())
        else:
            return 0


class FilterBox(QtGui.QGroupBox):
    '''
        Filter setting box
    '''

    def __init__(self, parent):
        QtGui.QWidget.__init__(self, parent)
        self.parent = parent

        self.setTitle('Filter')
        self.setAlignment(QtCore.Qt.AlignLeft)
        self.setDisabled(True)  # disable the box unless tds is loaded

        self.filterChoose = QtWidgets.QComboBox()
        self.filterChoose.addItems(['None',
                                    'Bartlett',
                                    'Blackman',
                                    'Hamming',
                                    'Hanning'])
        self.filterChoose.currentTextChanged.connect(self.parent.calc)
        thisLayout = QtWidgets.QGridLayout()
        thisLayout.addWidget(QtWidgets.QLabel('Filter Type'), 0, 0)
        thisLayout.addWidget(self.filterChoose, 0, 1)
        self.setLayout(thisLayout)

    def get_wf(self, n):
        ''' Generate window function '''

        w = self.filterChoose.currentText()

        if w == 'None':
            return np.ones(n)
        elif w == 'Bartlett':
            return np.bartlett(n)
        elif w == 'Blackman':
            return np.blackman(n)
        elif w == 'Hamming':
            return np.hamming(n)
        elif w == 'Hanning':
            return np.hanning(n)
        else:
            return np.ones(n)


class TDSData():
    '''
        Time domain data
    '''

    def __init__(self):
        '''
            Initiate the class
            Class attributes:
                self.isData: bool     data loading status
                self.minFreq: float   start frequency f_min (MHz)
                self.imFreq: float    intermediate frequency f_im (MHz)
                self.spanFreq: float  frequency span f_max-f_min (MHz)
                self.maxFreq: float   end frequency f_max = f_min + f_span (MHz)
                self.detFreq: float   detection frequency f_det = f_max + f_im (MHz)
                self.adcCLK: float    ADC clock frequency (Hz)
                self.pulseLen: float  pulse time (* ADC clock cycles) (s)
                self.acqN:  int       acquisition data points
                self.acqT:  float     acquisition time (s)
                self.repRate: float   repetition rate
                self.tdsSpec: n by 2 np.array   spectrum (xy) unit(s,V)
        '''

        self.isData = False
        self.minFreq = 0
        self.spanFreq = 0
        self.imFreq = 0
        self.maxFreq = 0
        self.detFreq = 0
        self.adcCLK = 0
        self.pulseLen = 0
        self.acqN = 0
        self.acqT = 0
        self.repRate = 0
        self.tdsSpec = np.zeros((2, 1))

    def load_file(self, filename):
        '''
            Reading the data file.
            header : # 153292.10|30.00|30.00|1.00E+009|832|4096|30|4096
            Returns:
                True  - load sucessfully
                False - file not found / wrong format
        '''

        if filename:
            try:
                # Get header
                with open(filename, 'r') as f:
                    header = f.readline()
                hd_array = header.split('|')
                # Write header info to class attributes
                self.minFreq = float(hd_array[0])
                self.spanFreq = float(hd_array[1])
                self.imFreq = float(hd_array[2])
                self.maxFreq = self.minFreq + self.spanFreq
                self.detFreq = self.maxFreq + self.imFreq
                self.adcCLK = float(hd_array[3])
                self.pulseLen = int(hd_array[4]) / self.adcCLK
                self.acqN = int(hd_array[5])
                self.acqT = self.acqN / self.adcCLK
                self.repRate = float(hd_array[6])
                # Load spectrum
                y = np.loadtxt(filename, skiprows=1)
                # The last data point is 0 but leave it (for fft purpose)
                x = np.arange(self.acqN + 1) / self.adcCLK
                self.tdsSpec = np.column_stack((x, y))
                self.isData = True
                return True
            except:
                self.isData = False
                return False
        else:
            self.isData = False
            return False


class ABSData():
    '''
        Absorption spectrum data
    '''

    def __init__(self):
        '''
            Initiate the class.
            Class attributes:
                self.isData: bool     data loading status
                self.minFreq: float   start frequency f_min (MHz)
                self.maxFreq: float   end frequency f_max (MHz)
        '''

        self.isData = False
        self.minFreq = 0
        self.maxFreq = 0
        self.fft_f_min = 0
        self.fft_f_max = 0
        self.absSpec = np.zeros((2, 1))

    def load_file(self, filename, fft_f_min, fft_f_max):
        '''
            Reading the data file. Skip the header.
            Arguments
                fft_f_min: FFT freq min (MHz)
                fft_f_max: FFT freq max (MHz)
            Returns:
                True  - load sucessfully
                False - file not found / wrong format
        '''

        if filename:
            try:
                # Load spectrum
                spec = np.loadtxt(filename, skiprows=1)
                spec = self._adjust_range(spec, fft_f_min, fft_f_max)
                # rescale freq to si unit
                spec[:, 0] = spec[:, 0] * 1e6
                self.absSpec = spec
                self.isData = True
                return True
            except:
                self.isData = False
                return False
        else:
            self.isData = False
            return False

    def _adjust_range(self, spec, fft_f_min, fft_f_max):
        ''' Adjust spectrum range to save storage.
            The largest range is the full FFT range +/- 200 MHz,
            defined by ABS_RANGE
        '''

        # get original spectral range
        self.minFreq = np.min(spec[:, 0])
        self.maxFreq = np.max(spec[:, 0])
        # adjust range
        fmin = max(self.minFreq, fft_f_min - ABS_RANGE)
        fmax = min(self.maxFreq, fft_f_max + ABS_RANGE)
        # get index
        idx = np.logical_and(spec[:, 0]>=fmin, spec[:, 0]<=fmax)
        return spec[idx, :]


if __name__ == '__main__':

    app = QtWidgets.QApplication(sys.argv)

    window = MainWindow()
    window.show()

    sys.exit(app.exec_())
